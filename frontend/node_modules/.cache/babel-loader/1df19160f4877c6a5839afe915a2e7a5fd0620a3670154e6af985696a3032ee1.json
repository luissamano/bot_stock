{"ast":null,"code":"var _jsxFileName = \"/Users/luissamano/code/bot_stock/bot_front/src/ActionProvider/index.jsx\";\nimport React from \"react\";\nimport { getListPriceStock, getPriceCurrent } from \"../Services\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionProvider = ({\n  createChatBotMessage,\n  children,\n  setState\n}) => {\n  const handleHello = () => {\n    const botMessage = createChatBotMessage(\"Hello. Nice to meet you.\");\n    setState(prev => ({\n      ...prev,\n      messages: [...prev.messages, botMessage]\n    }));\n  };\n  const handleSearchStockId = async value => {\n    removeWidgetMessage();\n    const message = createChatBotMessage(`Buscando ${value}...`, {\n      loading: true,\n      terminateLoading: true,\n      withAvatar: true\n    });\n    addMessageToState(message);\n    const current = await getPriceCurrent(value);\n    const {\n      data\n    } = await getListPriceStock();\n    const ls = data.filter(item => item.symbol == value);\n    addListPriceStock(current, ls, count);\n  };\n  const addMessageToState = message => {\n    setState(state => ({\n      ...state,\n      messages: [...state.messages, message]\n    }));\n  };\n  const removeWidgetMessage = () => {\n    setState(state => {\n      const messages = state.messages.filter(message => {\n        // Aquí filtramos los mensajes basados en el widgetId\n        return message.widget != 'Price' && message.type != 'bot';\n      });\n      return {\n        ...state,\n        messages\n      };\n    });\n  };\n  const addListPriceStock = (current, ls, count) => {\n    setState(state => ({\n      ...state,\n      currentPrice: current,\n      listPriceStock: ls,\n      count: count\n    }));\n    const message = createChatBotMessage(`Listo!`, {\n      delay: 1000,\n      loading: true,\n      terminateLoading: true,\n      withAvatar: true,\n      widget: \"Price\"\n    });\n    addMessageToState(message);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: React.Children.map(children, child => {\n      return /*#__PURE__*/React.cloneElement(child, {\n        actions: {\n          handleHello,\n          handleSearchStockId,\n          removeWidgetMessage\n        }\n      });\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_c = ActionProvider;\nexport default ActionProvider;\nvar _c;\n$RefreshReg$(_c, \"ActionProvider\");","map":{"version":3,"names":["React","getListPriceStock","getPriceCurrent","jsxDEV","_jsxDEV","ActionProvider","createChatBotMessage","children","setState","handleHello","botMessage","prev","messages","handleSearchStockId","value","removeWidgetMessage","message","loading","terminateLoading","withAvatar","addMessageToState","current","data","ls","filter","item","symbol","addListPriceStock","count","state","widget","type","currentPrice","listPriceStock","delay","Children","map","child","cloneElement","actions","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/luissamano/code/bot_stock/bot_front/src/ActionProvider/index.jsx"],"sourcesContent":["import React from \"react\";\nimport { getListPriceStock, getPriceCurrent } from \"../Services\";\n\nconst ActionProvider = ({ createChatBotMessage, children, setState }) => {\n  const handleHello = () => {\n    const botMessage = createChatBotMessage(\"Hello. Nice to meet you.\");\n\n    setState((prev) => ({\n      ...prev,\n      messages: [...prev.messages, botMessage],\n    }));\n  };\n\n  const handleSearchStockId = async (value) => {\n    \n    removeWidgetMessage();\n    \n    const message = createChatBotMessage(`Buscando ${value}...`, {\n      loading: true,\n      terminateLoading: true,\n      withAvatar: true,\n    });\n\n    addMessageToState(message);\n\n    const current = await getPriceCurrent(value);\n\n    const { data } = await getListPriceStock();\n    const ls = data.filter((item) => item.symbol == value);\n    \n    addListPriceStock(current, ls, count);\n  };\n\n  const addMessageToState = (message) => {\n    setState((state) => ({\n      ...state,\n      messages: [...state.messages, message],\n    }));\n  };\n\n  const removeWidgetMessage = () => {\n    setState((state) => {\n      const messages = state.messages.filter(message => {\n        // Aquí filtramos los mensajes basados en el widgetId\n        return (message.widget != 'Price' && message.type != 'bot');\n      });\n      return { ...state, messages };\n    });\n  };\n\n  const addListPriceStock = (current, ls, count) => {\n    setState((state) => ({\n      ...state,\n      currentPrice: current,\n      listPriceStock: ls,\n      count: count\n    }));\n\n    const message = createChatBotMessage(`Listo!`, {\n      delay: 1000,\n      loading: true,\n      terminateLoading: true,\n      withAvatar: true,\n      widget: \"Price\",\n    });\n\n    addMessageToState(message);\n  };\n  \n  return (\n    <div>\n      {React.Children.map(children, (child) => {\n        return React.cloneElement(child, {\n          actions: {\n            handleHello,\n            handleSearchStockId,\n            removeWidgetMessage,\n          },\n        });\n      })}\n    </div>\n  );\n};\n\nexport default ActionProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}