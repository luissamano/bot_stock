{"ast":null,"code":"class ActionProvider {\n  constructor(_createChatBotMessage, setStateFunc) {\n    this.handleSearchFinish = async ({\n      state\n    }) => {\n      const botMessage = createChatBotMessage(\"Listo\", {\n        loading: true,\n        terminateLoading: true,\n        withAvatar: true\n      });\n      //setState({ type: addMessageToState, botMessage })\n      const {\n        data\n      } = await getPriceStock(state.idStock);\n    };\n    this.handleInputStock = () => {\n      const botMessage = createChatBotMessage(\"Ingresa la clave de la accion a buscar:\", {\n        loading: true,\n        terminateLoading: true,\n        withAvatar: true\n      });\n      // setState({ type: addMessageToState})\n    };\n    this.createChatBotMessage = _createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n}\n;\nexport default ActionProvider;","map":{"version":3,"names":["ActionProvider","constructor","createChatBotMessage","setStateFunc","handleSearchFinish","state","botMessage","loading","terminateLoading","withAvatar","data","getPriceStock","idStock","handleInputStock","setState"],"sources":["/Users/luissamano/code/bot_stock/bot_front/src/ActionProvider/index.js"],"sourcesContent":["class ActionProvider {\n  constructor(createChatBotMessage, setStateFunc) {\n    this.createChatBotMessage = createChatBotMessage;\n    this.setState = setStateFunc;\n  }\n\n  handleSearchFinish = async ({state}) => {\n    const botMessage = createChatBotMessage(\n      \"Listo\",\n      {\n        loading: true,\n        terminateLoading: true,\n        withAvatar: true,\n      }\n    );\n    //setState({ type: addMessageToState, botMessage })\n    const { data } = await getPriceStock(state.idStock);\n  };\n\n  handleInputStock = () => {\n    const botMessage = createChatBotMessage(\n      \"Ingresa la clave de la accion a buscar:\",\n      {\n        loading: true,\n        terminateLoading: true,\n        withAvatar: true,\n      }\n    );\n    // setState({ type: addMessageToState})\n  };\n\n\n};\n\nexport default ActionProvider;"],"mappings":"AAAA,MAAMA,cAAc,CAAC;EACnBC,WAAWA,CAACC,qBAAoB,EAAEC,YAAY,EAAE;IAAA,KAKhDC,kBAAkB,GAAG,OAAO;MAACC;IAAK,CAAC,KAAK;MACtC,MAAMC,UAAU,GAAGJ,oBAAoB,CACrC,OAAO,EACP;QACEK,OAAO,EAAE,IAAI;QACbC,gBAAgB,EAAE,IAAI;QACtBC,UAAU,EAAE;MACd,CACF,CAAC;MACD;MACA,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMC,aAAa,CAACN,KAAK,CAACO,OAAO,CAAC;IACrD,CAAC;IAAA,KAEDC,gBAAgB,GAAG,MAAM;MACvB,MAAMP,UAAU,GAAGJ,oBAAoB,CACrC,yCAAyC,EACzC;QACEK,OAAO,EAAE,IAAI;QACbC,gBAAgB,EAAE,IAAI;QACtBC,UAAU,EAAE;MACd,CACF,CAAC;MACD;IACF,CAAC;IA3BC,IAAI,CAACP,oBAAoB,GAAGA,qBAAoB;IAChD,IAAI,CAACY,QAAQ,GAAGX,YAAY;EAC9B;AA4BF;AAAC;AAED,eAAeH,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}